/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/oKucKIwxYzL
 */
'use client'
import {Button} from "@/components/ui/button"
import {CardTitle, CardHeader, CardContent, Card} from "@/components/ui/card"
import {AvatarImage, AvatarFallback, Avatar} from "@/components/ui/avatar"
import {Label} from "@/components/ui/label"
import {Input} from "@/components/ui/input"
import React, {useState} from 'react';
import {Modal, Typography} from "@mui/material";
import Box from '@mui/material/Box';


export function Score() {
    // State to hold the score value
    const [score, setScore] = useState(null);
    const [monthlyTurnover, setMonthlyTurnover] = useState('');
    const [idType, setIdType] = useState('');
    const [numberOfLoansTakenIn12Months, setNumberOfLoansTakenIn12Months] = useState('');
    const [probabilityOfDefault, setProbabilityOfDefault] = useState('');
    const [msisdn, setMsisdn] = useState('');
    const [monthlySpend, setMonthlySpend] = useState('');
    const [numberOfLoansRepayedIn12Months, setNumberOfLoansRepayedIn12Months] = useState('');
    const [monthsActive, setMonthsActive] = useState('');
    const [age, setAge] = useState('');
    const [rating, setRating] = useState('EEE');
    const [fields, setFields] = useState([]);


    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedLabel, setSelectedLabel] = useState('');
    const [customLabel, setCustomLabel] = useState('');
    const [nameList] = useState(['Name 1', 'Name 2', 'Name 3']); // Example list of names

    const handleOpenModal = () => {
        setIsModalOpen(true);
        setCustomLabel('');
    };

    const handleCloseModal = () => setIsModalOpen(false);

    const handleSelectLabel = (e) => {
        setSelectedLabel(e.target.value);
    };

    const addNewField = () => {
        const labelName = customLabel || selectedLabel;
        if (!labelName) return; // Don't add a field if no label is selected

        const newField = {
            id: `field-${fields.length}`,
            label: labelName,
            placeholder: `Enter value for ${labelName}`
        };
        setFields([...fields, newField]);
        handleCloseModal();
    };


    const style = {
        position: 'absolute',
        top: '50%',
        left: '50%',
        transform: 'translate(-50%, -50%)',
        width: 400,
        bgcolor: 'background.paper',
        boxShadow: 24,
        p: 4,
        maxHeight: '80%', // Limit the height of the modal
        overflowY: 'auto', // Add scroll if content is too long
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center'
    };


    // Function to fetch score from API
    const fetchScore = async () => {
        // try {
        //   const response = await fetch('YOUR_API_ENDPOINT');
        //   const data = await response.json();
        //   setScore(data.score); // Assuming the API returns an object with a score property
        // } catch (error) {
        //   console.error('Error fetching score:', error);
        // }
        const sampleResponse = {
            "out_MONTHS_ACTIVE": "60.0",
            "out_rating": "DDD",
            "out_TOTAL_VALUE_OF_LOANS_TAKEN_IN_12_MONTHS": "null",
            "out_TOTAL_VALUE_OF_LOANS_REPAYED_IN_12_MONTHS": "null",
            "out_CUSTOMER_TYPE": "INDIVIDUAL",
            "out_USER_ID": "PT181210.1110.620330",
            "out_TOTAL_SCORE": "745.0",
            "out_Monthly_Turnovers": "166.66666666666666",
            "out_ID_TYPE": "NID",
            "out_NUMBER_OF_LOANS_TAKEN_IN_12_MONTHS": "0.0",
            "out_probability_of_default": "0.7486017139739374",
            "out_MSISDN": "700000000",
            "out_Monthly_Spend": "183.33333333333334",
            "out_NUMBER_OF_LOANS_REPAYED_IN_12_MONTHS": "0.0",
            "out_ID_NO": "35328038",
            "MSISDNS": [
                {
                    "msisdn": "700000000",
                    "status": "Y"
                }
            ],
            "age": "64"
        }
        setScore(sampleResponse.out_TOTAL_SCORE)
        setMonthlyTurnover(sampleResponse.out_Monthly_Turnovers);
        setIdType(sampleResponse.out_ID_TYPE || 'N/A');
        setNumberOfLoansTakenIn12Months(sampleResponse.out_NUMBER_OF_LOANS_TAKEN_IN_12_MONTHS);
        setProbabilityOfDefault(sampleResponse.out_probability_of_default);
        setMsisdn(sampleResponse.out_MSISDN);
        setMonthlySpend(sampleResponse.out_Monthly_Spend);
        setNumberOfLoansRepayedIn12Months(sampleResponse.out_NUMBER_OF_LOANS_REPAYED_IN_12_MONTHS);
        setMonthsActive(sampleResponse.out_MONTHS_ACTIVE);
        setAge(sampleResponse.age);
        setRating(sampleResponse.out_rating);

    };
    const inputRefs = React.useRef({});


    const gatherInputValues = () => {
        let inputData = {};

        // Dynamic fields
        fields.forEach(field => {
            inputData[field.label] = inputRefs.current[field.id].value;
        });

        // Static fields
        inputData['msisdn'] = document.getElementById('msisdns').value;
        inputData['monthlyAirtimeSpend'] = document.getElementById('additionalInput1').value;
        inputData['monthlyWithdrawals'] = document.getElementById('additionalInput2').value;

        // ... include other fixed inputs as needed ...

        return inputData;
    };

    // Function to handle API call
    const handleGetScore = async () => {
        console.log("Get Score button clicked"); // Check if the function is triggered
        const inputValues = gatherInputValues();
        console.log("Input Values: ", inputValues); // Check the gathered input values

        try {
            console.log("Making API Call");
            const response = await fetch('https://httpbin.org/anything', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(inputValues)
            });
            const data = await response.json();
            console.log("API Response: ", data); // Check the API response
        } catch (error) {
            console.error('Error fetching score:', error);
        }
        const sampleResponse = {
            "out_MONTHS_ACTIVE": "60.0",
            "out_rating": "DDD",
            "out_TOTAL_VALUE_OF_LOANS_TAKEN_IN_12_MONTHS": "null",
            "out_TOTAL_VALUE_OF_LOANS_REPAYED_IN_12_MONTHS": "null",
            "out_CUSTOMER_TYPE": "INDIVIDUAL",
            "out_USER_ID": "PT181210.1110.620330",
            "out_TOTAL_SCORE": "745.0",
            "out_Monthly_Turnovers": "166.66666666666666",
            "out_ID_TYPE": "NID",
            "out_NUMBER_OF_LOANS_TAKEN_IN_12_MONTHS": "0.0",
            "out_probability_of_default": "0.7486017139739374",
            "out_MSISDN": "700000000",
            "out_Monthly_Spend": "183.33333333333334",
            "out_NUMBER_OF_LOANS_REPAYED_IN_12_MONTHS": "0.0",
            "out_ID_NO": "35328038",
            "MSISDNS": [
                {
                    "msisdn": "700000000",
                    "status": "Y"
                }
            ],
            "age": "64"
        }
        setScore(sampleResponse.out_TOTAL_SCORE)
        setMonthlyTurnover(sampleResponse.out_Monthly_Turnovers);
        setIdType(sampleResponse.out_ID_TYPE || 'N/A');
        setNumberOfLoansTakenIn12Months(sampleResponse.out_NUMBER_OF_LOANS_TAKEN_IN_12_MONTHS);
        setProbabilityOfDefault(sampleResponse.out_probability_of_default);
        setMsisdn(sampleResponse.out_MSISDN);
        setMonthlySpend(sampleResponse.out_Monthly_Spend);
        setNumberOfLoansRepayedIn12Months(sampleResponse.out_NUMBER_OF_LOANS_REPAYED_IN_12_MONTHS);
        setMonthsActive(sampleResponse.out_MONTHS_ACTIVE);
        setAge(sampleResponse.age);
        setRating(sampleResponse.out_rating);
    };


    return (
        (<main key="1" className="p-8 flex flex-col gap-8 bg-gray-100">
            <div className="flex items-center gap-4">
                <h1 className="text-4xl font-bold text-gray-900">Kopo Score</h1>
                <Button className="bg-blue-500 text-white">
                    <RefreshCwIcon className="w-4 h-4"/>
                </Button>
            </div>
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <Card className="bg-white shadow-lg rounded-lg">
                    <CardHeader className="bg-gray-200">
                        <CardTitle className="text-lg font-semibold text-gray-700">User Details</CardTitle>
                    </CardHeader>
                    <CardContent className="flex items-center gap-4 p-4">
                        <Avatar>
                            <AvatarImage alt="User avatar" src="/placeholder.svg?height=64&width=64"/>
                            <AvatarFallback>UD</AvatarFallback>
                        </Avatar>
                        <div>
                            <h2 className="text-lg font-semibold text-gray-800">John Doe</h2>
                            <p className="text-sm text-gray-600">johndoe@example.com</p>
                            <p className="text-sm text-gray-600">Age: {age}</p>
                            <p className="text-sm text-gray-600">Months Active: {monthsActive}</p>
                            <p className="text-sm text-gray-600">ID Type: <span className="font-bold">{idType}</span>
                            </p>
                            <p className="text-sm text-gray-600">MSISDN: <span className="font-bold">{msisdn}</span></p>

                        </div>
                    </CardContent>
                </Card>
                <Card className="bg-white shadow-lg rounded-lg">
                    <CardHeader className="bg-gray-200">
                        <CardTitle className="text-lg font-semibold text-gray-700">Score Information</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-2 p-4">
                        <h2 className="text-3xl font-bold text-center text-blue-600">{rating}</h2>
                        <h2 className="text-6xl font-bold text-center text-blue-600">{score !== null ? score : '0'}</h2>
                        <p className="text-sm text-gray-600">Monthly Turnover: <span
                            className="font-bold">{monthlyTurnover}</span></p>
                        <p className="text-sm text-gray-600">ID Type: <span className="font-bold">{idType}</span></p>
                        <p className="text-sm text-gray-600">Number Of Loans Taken In 12 Months: <span
                            className="font-bold">{numberOfLoansTakenIn12Months}</span></p>
                        <p className="text-sm text-gray-600">Probability Of Default: <span
                            className="font-bold">{probabilityOfDefault}</span></p>
                        <p className="text-sm text-gray-600">MSISDN: <span className="font-bold">{msisdn}</span></p>
                        <p className="text-sm text-gray-600">Monthly Spend: <span
                            className="font-bold">{monthlySpend}</span></p>
                        <p className="text-sm text-gray-600">Number Of Loans Repayed In 12 Months: <span
                            className="font-bold">{numberOfLoansRepayedIn12Months}</span></p>
                    </CardContent>
                </Card>
                <Card className="bg-white shadow-lg rounded-lg">
                    <CardHeader className="bg-gray-200">
                        <CardTitle className="text-lg font-semibold text-gray-700">Filter & Sort</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4 overflow-auto p-4">
                        <div className="space-y-2">
                            <Label htmlFor="msisdns">MSISDN:</Label>
                            <Input id="msisdns" placeholder="Enter MSISDNs"/>
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="additionalInput1">Monthly Airtime Spend:</Label>
                            <Input id="additionalInput1" placeholder="Enter Monthly Deposits"/>
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="additionalInput2">Monthly Withdrawals:</Label>
                            <Input id="additionalInput2" placeholder="Enter Monthly Withdrawals"/>
                        </div>
                        {
                            fields.map((field, index) => (
                                <div key={field.id} className="space-y-2">
                                    <Label htmlFor={field.id}>{field.label}:</Label>
                                    <Input ref={(el) => inputRefs.current[field.id] = el} id={field.id}
                                           placeholder={field.placeholder}/>
                                </div>
                            ))
                        }
                        <Button className="w-full bg-blue-500 text-white" onClick={handleOpenModal}>Add New
                            Field</Button>
                        <Button className="w-full bg-blue-500 text-white" onClick={handleGetScore}>Get Score</Button>


                        <Modal
                            open={isModalOpen}
                            onClose={handleCloseModal}
                            aria-labelledby="modal-modal-title"
                            aria-describedby="modal-modal-description"
                        >
                            <Box sx={style}>
                                <Typography id="modal-modal-title" variant="h6" component="h2" sx={{mb: 2}}>
                                    Select a Score Input Name
                                </Typography>
                                <select onChange={handleSelectLabel} value={selectedLabel}
                                        style={{marginBottom: '20px', padding: '10px'}}>
                                    <option value="">Select a name</option>
                                    {nameList.map((name, index) => (
                                        <option key={index} value={name}>{name}</option>
                                    ))}
                                </select>
                                <Typography sx={{mt: 2, mb: 1}}>
                                    Or enter a custom Input Name:
                                </Typography>
                                <input
                                    type="text"
                                    value={customLabel}
                                    onChange={(e) => setCustomLabel(e.target.value)}
                                    style={{
                                        padding: '10px',
                                        marginBottom: '20px',
                                        border: '1px solid #ccc',
                                        borderRadius: '4px',
                                        width: '90%'
                                    }}
                                />
                                <Button className="w-full bg-blue-500 text-white" onClick={addNewField} sx={{mb: 2}}>Add
                                    Field</Button>
                                <Button onClick={handleCloseModal}>Close</Button>
                            </Box>
                        </Modal>

                    </CardContent>
                </Card>
            </div>
        </main>)
    );
}


function RefreshCwIcon(props) {
    return (
        (<svg
            {...props}
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round">
            <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"/>
            <path d="M21 3v5h-5"/>
            <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"/>
            <path d="M8 16H3v5"/>
        </svg>)
    );
}
